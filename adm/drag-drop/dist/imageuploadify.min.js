(function ($, window, document, undefined) {
    window.addEventListener(
        "dragover",
        function (e) {
            e = e || event;
            e.preventDefault();
        },
        false
    );
    window.addEventListener(
        "drop",
        function (e) {
            e = e || event;
            e.preventDefault();
        },
        false
    );
    const compareMimeType = (mimeTypes, fileType, formatFile) => {
        if (mimeTypes.length < 2 && mimeTypes[0] === "*") {
            return true;
        }
        for (let index = 1; index < mimeTypes.length; index += 3) {
            if (mimeTypes[index + 1] === "*" && fileType.search(new RegExp(mimeTypes[index])) != -1) {
                return true;
            } else if (mimeTypes[index + 1] && mimeTypes[index + 1] != "*" && fileType.search(new RegExp("\\*" + mimeTypes[index + 1] + "\\*")) != -1) {
                return true;
            } else if (mimeTypes[index + 1] && mimeTypes[index + 1] != "*" && fileType.search(new RegExp(mimeTypes[index + 1])) != -1) {
                return true;
            } else if (mimeTypes[index + 1] === "" && (fileType.search(new RegExp(mimeTypes[index])) != -1 || formatFile.search(new RegExp(mimeTypes[index])) != -1)) {
                return true;
            }
        }
        return false;
    };
    $.fn.imageuploadify = function (opts) {
        
        const formData = new FormData();
        let time = 0;

        const settings = $.extend({}, $.fn.imageuploadify.defaults, opts);
        this.each(function () {
            const self = this;
            // console.log(this)
            /*if (!$(self).attr("multiple")) {
                return;
            }*/
            let accept = $(self).attr("accept") ? $(self).attr("accept").replace(/\s/g, "").split(",") : null;
            let result = [];
            accept.forEach((item) => {
                let regexp;
                if (item.search(/\//) != -1) {
                    regexp = new RegExp("([A-Za-z-.]*)/([A-Za-z-*.]*)", "g");
                } else {
                    regexp = new RegExp(".([A-Za-z-]*)()", "g");
                }
                const r = regexp.exec(item);
                result = result.concat(r);
            });
            
            let totalFiles = [];
            let counter = 0;
            let dragbox = $(
                `<div class="imageuploadify well"><div class="imageuploadify-overlay"><i class="fa fa-picture-o"></i></div><div class="imageuploadify-images-list text-center"><i class="fa fa-cloud-upload"></i><span class='imageuploadify-message'>Drag&Drop Your File(s)Here To Upload</span><button type="button"class="btn btn-default">or select file to upload</button></div></div>`
            );
            let overlay = dragbox.find(".imageuploadify-overlay");
            let uploadIcon = dragbox.find(".imageuploadify-overlay i");
            // let imagesList = dragbox.find(".imageuploadify-images-list");
            let imagesList = $('.res');
            let addIcon = dragbox.find(".imageuploadify-images-list i");
            let addMsg = dragbox.find(".imageuploadify-images-list span");
            let button = dragbox.find(".imageuploadify-images-list button");
            const retrieveFiles = (files) => {
                // console.log(files)
                for (let index = 0; index < files.length; ++index) {
                    if (!accept || compareMimeType(result, files[index].type, /(?:\.([^.]+))?$/.exec(files[index].name)[1])) {
                        const id = Math.random().toString(36).substr(2, 9);
                        readingFile(id, files[index]);
                        totalFiles.push({ id: id, file: files[index] });
                    }
                }
            };
            const readingFile = (id, file) => {
                const fReader = new FileReader();
                var fileName = file.name.split('.')[0];
                var filedName = $('.file_input').attr('name');
                const width = dragbox.width();
                const boxesNb = Math.floor(width / 100);
                const marginSize = Math.floor((width - boxesNb * 100) / (boxesNb + 1));
                let container = $(
                    `<div class="row col-sm-12 p-0 image-block mb-3 imageuploadify-container"> <div class="col-sm-4 addImage text-center">  </div> <div class="col-sm-4"> <input type="text" class="form-control form-control-sm title" value="${fileName}" name="title[]" placeholder="Title"> </div> <div class="col-sm-3 p-0"> <input type="text" class="form-control form-control-sm alt" value="${fileName}" name="alt[]" placeholder="Alt Text"> </div> <div class="col-sm-1"> <button type='button' class='btn btn-danger fa fa-trash deleteBtn'></button> </div> </div>` 
                )
                let details = container.find(".imageuploadify-details");
                let deleteBtn = container.find("button");
                container.css("margin-left", marginSize + "px");
                details
                    .hover(function () {
                        $(this).css("opacity", "1");
                    })
                    .mouseleave(function () {
                        $(this).css("opacity", "0");
                    });
                if (file.type && file.type.search(/image/) != -1) {
                	$('.btn-upload').removeClass('disabled');
                    fReader.onloadend = function (e) {
                        if ($('.perview-img').length > 0 && $('#page_type').val() == 'singleUpload') {
                            $('.perview-img').attr('src',e.target.result)
                        }else if ($('.perview-img').length > 0 && $('#page_type').val() == 'singleUploadMultipleInput') {
                            $('.'+$(self).attr('name')).attr('src',e.target.result);
                            // $(self).parent().next().find('.perview-img').attr('src',e.target.result)
                        }
                        let image = $("<img width='140'>");
                        image.attr("src", e.target.result);
                        container.find(".addImage").append(image);
                        imagesList.append(container);
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+4)").css("margin-left", marginSize + "px");
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+3)").css("margin-right", marginSize + "px");
                        
                    };
                } else if (file.type) {
                    let type = "<i class='fa fa-file'></i>";
                    if (file.type.search(/audio/) != -1) {
                        type = "<i class='fa fa-file-audio-o'></i>";
                    } else if (file.type.search(/video/) != -1) {
                        type = "<i class='fa fa-file-video-o'></i>";
                    }
                    fReader.onloadend = function (e) {
                        let span = $("<span>" + type + "</span>");
                        span.css("font-size", "5em");
                        container.append(span);
                        imagesList.append(container);
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+4)").css("margin-left", marginSize + "px");
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+3)").css("margin-right", marginSize + "px");
                    };
                }
                deleteBtn.on("click", function () {
                    // $(this.parentElement).remove();
                    $(this).parent().parent().remove()
                    if ($('.addImage img').length == 0) {
                    	$('.btn-upload').addClass('disabled');
                    }
                    for (let index = 0; totalFiles.length > index; ++index) {
                        if (totalFiles[index].id === id) {
                            totalFiles.splice(index, 1);
                            break;
                        }
                    }
                });
                fReader.readAsDataURL(file);
            };
            const disableMouseEvents = () => {
                overlay.css("display", "flex");
                dragbox.css("border-color", "#3AA0FF");
                button.css("pointer-events", "none");
                addMsg.css("pointer-events", "none");
                addIcon.css("pointer-events", "none");
                imagesList.css("pointer-events", "none");
            };
            const enableMouseEvents = () => {
                overlay.css("display", "none");
                dragbox.css("border-color", "rgb(210, 210, 210)");
                button.css("pointer-events", "initial");
                addMsg.css("pointer-events", "initial");
                addIcon.css("pointer-events", "initial");
                imagesList.css("pointer-events", "initial");
            };
            button
                .mouseenter(function onMouseEnter(event) {
                    button.css("background", "#3AA0FF").css("color", "white");
                })
                .mouseleave(function onMouseLeave() {
                    button.css("background", "white").css("color", "#3AA0FF");
                });
            button.on("click", function onClick(event) {
                event.stopPropagation();
                event.preventDefault();
                $(self).click();
            });
            dragbox.on("dragenter", function onDragenter(event) {
                event.stopPropagation();
                event.preventDefault();
                counter++;
                disableMouseEvents();
            });
            dragbox.on("dragleave", function onDragLeave(event) {
                // console.log('Hello dragleave')
                event.stopPropagation();
                event.preventDefault();
                counter--;
                if (counter === 0) {
                    enableMouseEvents();
                }
            });
            dragbox.on("drop", function onDrop(event) {
                // console.log('Hello drop')
                event.stopPropagation();
                event.preventDefault();
                $('#loader').show();
                enableMouseEvents();
                const files = event.originalEvent.dataTransfer.files;
                clearTimeout(time);
                
                if($('#page_type').val() == 'photoUpload'){
                    var action = $(this).closest("form").attr("action");
                    time = setTimeout(function() {
                        uploadImage(files,action);
                    },3000)
                    // const myTimeout = setTimeout(uploadImage(files,action), 50000);
                } else if($('#page_type').val() == 'singleUpload' || $('#page_type').val() == 'singleUploadMultipleInput') {
                    $(self).prop("files", event.originalEvent.dataTransfer.files);
                }
                retrieveFiles(files);

                
            });
            $(window).bind("resize", function (e) {
                window.resizeEvt;
                $(window).resize(function () {
                    clearTimeout(window.resizeEvt);
                    window.resizeEvt = setTimeout(function () {
                        const width = dragbox.width();
                        const boxesNb = Math.floor(width / 100);
                        const marginSize = Math.floor((width - boxesNb * 100) / (boxesNb + 1));
                        let containers = imagesList.find(".imageuploadify-container");
                        for (let index = 0; index < containers.length; ++index) {
                            $(containers[index]).css("margin-right", "0px");
                            $(containers[index]).css("margin-left", marginSize + "px");
                        }
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+4)").css("margin-left", marginSize + "px");
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+3)").css("margin-right", marginSize + "px");
                    }, 500);
                });
            });
            
            $(self).on("change", function onChange() {
                clearTimeout(time);
                const files = this.files;
                retrieveFiles(files);
                if($('#page_type').val() == 'photoUpload'){
                    $('#loader').show();
                    var action = $(this).closest("form").attr("action");
                    time = setTimeout(function() {
                        uploadImage(files,action);
                    },3000)
                }
            });

            /*$(self)
                .closest("form")
                .on("submit", function (event) {
                    event.stopPropagation();
                    event.preventDefault(event);
                    const inputs = this.querySelectorAll("input, textarea, select, button");
                    const formData = new FormData();
                    for (let index = 0; index < inputs.length; ++index) {
                        if (inputs[index].tagName === "SELECT" && inputs[index].hasAttribute("multiple")) {
                            const options = inputs[index].options;
                            for (let i = 0; options.length > i; ++i) {
                                if (options[i].selected) {
                                    formData.append(inputs[index].getAttribute("name"), options[i].value);
                                }
                            }
                        } else if (!inputs[index].getAttribute("type") || (inputs[index].getAttribute("type").toLowerCase() !== "checkbox" && inputs[index].getAttribute("type").toLowerCase() !== "radio") || inputs[index].checked) {
                            formData.append(inputs[index].name, inputs[index].value);
                        } else if ($(inputs[index]).getAttribute("type") != "file") {
                            formData.append(inputs[index].name, inputs[index].value);
                        }
                    }
                    for (var i = 0; i < totalFiles.length; i++) {
                        formData.append(self.name, totalFiles[i].file);
                    }
                    var xhr = new XMLHttpRequest();
                    xhr.onreadystatechange = function (e) {
                        if (xhr.status == 200 && xhr.readyState === XMLHttpRequest.DONE) {
                            window.location.replace(xhr.responseURL);
                        }
                    };
                    xhr.open("POST", $(this).attr("action"), true);
                    xhr.send(formData);
                    return false;
                });*/
            $(self).hide();
            dragbox.insertAfter(this);
        });
        return this;
    };
    $.fn.imageuploadify.defaults = {};
})(jQuery, window, document);

function uploadImage(files,action) {

    const formData = new FormData();
    formData.append('isAjax', "1");
    formData.append('onscreenCms', $('.onscreenCms').val());

    var xhr = new XMLHttpRequest();
    var alt = [];
    var title = [];
    for (var i = 0; i < files.length; i++) {
        formData.append('image[]', files[i]);
        formData.append('image_type', $('input[name="image_type"]').val());
        formData.append('media_id', $('input[name="media_id"]').val());
        formData.append('alt[]',$('input[name="alt[]"]').eq(i).val());
        formData.append('title[]',$('input[name="title[]"]').eq(i).val());
    }
    xhr.onreadystatechange = function (e) {
        if (xhr.status == 200 && xhr.readyState === XMLHttpRequest.DONE) {
            // window.location.replace(xhr.responseURL);
            if ($('.onscreenCms').val() == '1') {
                window.opener.location.reload();
                window.close();
            } else {
                toastr.success('Image Filed Uploaded....');
                location.reload();
            }
            // console.log(e)
            // console.log(xhr)
        }
    };
    xhr.open("POST", action, true);
    xhr.send(formData);
    // console.log(formData);
}
